generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email  String   @unique @db.VarChar
  name   String   @db.VarChar
  role   UserRole
  status Status   @default(ACTIVE)

  @@map("user")
}

model Requests {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String   @unique @db.VarChar
  name  String   @db.VarChar
  role  UserRole

  @@map("requests")
}

model Medicine {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandName       String            @db.VarChar
  saltName        String            @db.VarChar
  categoryId      String            @db.Uuid
  status          Status            @default(ACTIVE)
  CheckupMedicine CheckupMedicine[]
  Category        Category          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Purchases       Purchase[]
  Stock           Stock[]

  @@map("medicine")
}

model Supplier {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar
  address      String         @db.VarChar
  city         String?        @db.VarChar
  state        String         @db.VarChar
  pinCode      Int?
  mobileNumber String         @unique @db.VarChar
  email        String?        @db.VarChar
  status       Status         @default(ACTIVE)
  PurchaseList PurchaseList[]

  @@map("supplier")
}

model Staff {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String     @db.VarChar
  email          String     @unique @db.VarChar
  mobileNumber   String?    @db.VarChar
  role           Role
  department     String?    @db.VarChar
  speciality     String?    @db.VarChar
  gender         Gender
  status         Status     @default(ACTIVE)
  DoctorCheckups Checkup[]  @relation("DoctorCheckups")
  StaffCheckups  Checkup[]  @relation("StaffCheckups")
  Schedule       Schedule[]

  @@map("staff")
}

model Schedule {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staffId String @db.Uuid
  shift   Shift
  day     Day
  Staff   Staff  @relation(fields: [staffId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("schedule")
}

model Stock {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medicineId  String   @db.Uuid
  stock       Int
  inQuantity  Int
  outQuantity Int
  Medicine    Medicine @relation(fields: [medicineId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("stock")
}

model PurchaseList {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId   String     @db.Uuid
  purchaseDate DateTime   @db.Timestamp(6)
  invoiceNo    BigInt     @unique
  Details      String?    @db.VarChar
  Purchase     Purchase[]
  Supplier     Supplier   @relation(fields: [supplierId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("purchaseList")
}

model Category {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName String     @db.VarChar
  strengthType String     @db.VarChar
  status       Status     @default(ACTIVE)
  Medicine     Medicine[]

  @@map("category")
}

model Purchase {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseListId String       @db.Uuid
  medicineId     String       @db.Uuid
  mfgDate        DateTime?    @db.Timestamp(6)
  expiryDate     DateTime     @db.Timestamp(6)
  batchNo        BigInt       @unique
  quantity       Int
  Medicine       Medicine     @relation(fields: [medicineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PurchaseList   PurchaseList @relation(fields: [purchaseListId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("purchase")
}

model Patient {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String          @db.VarChar
  department         Department?
  age                Int
  email              String          @unique @db.VarChar
  bloodGroup         String          @db.VarChar
  program            Program?
  fatherOrSpouseName String?         @db.VarChar
  category           PatientCategory
  gender             Gender
  allergy            String?         @db.VarChar
  status             Status          @default(ACTIVE)
  Checkup            Checkup[]
  PatientVitals      PatientVitals[]

  @@map("patient")
}

model Checkup {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patientId        String            @db.Uuid
  temperature      Float?
  date             DateTime          @db.Timestamp(6)
  spO2             Float?
  pulseRate        Int?
  bloodPressure    String?           @db.VarChar
  symptoms         String?           @db.VarChar
  diagnosis        String            @db.VarChar
  referredDoctor   String?           @db.VarChar
  referredHospital String?           @db.VarChar
  doctorId         String?           @db.Uuid
  staffId          String            @db.Uuid
  Doctor           Staff?            @relation("DoctorCheckups", fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Patient          Patient           @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Staff            Staff             @relation("StaffCheckups", fields: [staffId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CheckupMedicine  CheckupMedicine[]

  @@map("checkup")
}

model PatientVitals {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patientId     String   @db.Uuid
  temperature   Float?
  date          DateTime @db.Timestamp(6)
  bloodPressure String?  @db.VarChar
  pulseRate     Int?
  spO2          Float?
  Patient       Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("patient_vitals")
}

model CheckupMedicine {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medicineId String   @db.Uuid
  dosage     String?  @db.VarChar
  quantity   Int
  checkupId  String   @db.Uuid
  Checkup    Checkup  @relation(fields: [checkupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Medicine   Medicine @relation(fields: [medicineId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("checkupMedicine")
}

model DiagnosisSymptoms {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  diagnosis String @db.VarChar
  symptom   String @db.VarChar

  @@map("diagnosis_symptoms")
}

model Hospitals {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar

  @@map("hospitals")
}

model OpdCounter {
  id    String @id @db.VarChar
  date  String @db.VarChar
  count Int
}

model VisitingSpecialist {
  id             String   @id @default(uuid())
  name           String
  specialization String
  availableTime  String
  availableDays  String[]
  contactNumber  String
  email          String?
  status         String   @default("ACTIVE")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("VisitingSpecialist")
}

model Procedure {
  id                     String    @id @db.Uuid
  patientemail           String
  patientname            String
  intime                 DateTime  @db.Timestamptz(6)
  procedurerecord        String
  patientconditionbefore String
  referredhospital       String
  outtime                DateTime? @db.Timestamptz(6)

  @@map("procedure")
}

model verification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String   @unique @db.VarChar
  otp        String   @db.VarChar
  expiryTime DateTime @db.Timestamp(6)
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Department {
  COMPUTER_SCIENCE
  ELECTRICAL
  MECHANICAL
  MATHEMATICS_COMPUTING
  CHEMICAL
  CIVIL
  METALLURGY
  ENGINEERING_PHYSICS
  PHYSICS
  CHEMISTRY
  BIOLOGY
  MATHEMATICS
  HUMANITIES
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
}

enum Program {
  BTECH
  MTECH
  PHD
  DUAL_DEGREE
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
  PARAMEDICAL
}

enum DoctorDepartment {
  AYURVEDIC
  GYNECOLOGY
  HOMEOPATHY
  OTHERS
}

enum Role {
  DOCTOR
  PARAMEDICAL
}

enum PatientCategory {
  STUDENT
  FACULTY
  STAFF
  VISITOR
}

enum Gender {
  MALE
  FEMALE
}
